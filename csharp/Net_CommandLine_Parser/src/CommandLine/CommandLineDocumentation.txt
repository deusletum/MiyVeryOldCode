Microsoft.CommandLine documentation.

The CommandLine framework allows a program to easily implement command line parsing through CLR attributes.  
All that is needed is to derive from the Command class and attribute the class with the different options
avialable on that command.  Then in the Main() of the program create the command using the CommandFactory
passing in the command line arguments given to the class.

Here is an example of how to call the infrastructure.  This assumes that the Command objects are in the executing
assembly.

static int Main(string[] arguments)
{
    Command command = null ;
    try
    {	
        CommandFactory factory = new CommandFactory(Assembly.GetExecutingAssembly(), new MultipleCommandOptionParser());

        try
        {
            // create the command
            //
            command = factory.Create(arguments) ;
        }
        catch(UsageException e)
        {
            Console.WriteLine();
            Console.WriteLine("ERROR: " + e.Message);
            Console.WriteLine();
            if(e.Command != null)
            {
                e.Command.Specification.PrintFullUsage(Console.Out);
            }
            return FatalExitCode;
        }
        //
        // Run the command.
        //
        Debug.Assert(command != null, "command != null");
        command.Run();
        command.Dispose();
        return command.ReturnCode;
    }
    catch(Exception e)
    {
        if(command != null)
        {
            command.Dispose();
        }
        Console.Error.WriteLine("Error running tools: {0}", ExceptionUtility.GetStackTraceString(e)) ;
        return FatalExitCode;
    }		
}
        
For an example Command implementation look at ExampleCommand.cs in the source code.  It excercises most of the options
that can be set on a Command.

To be done:

Breaking changes: